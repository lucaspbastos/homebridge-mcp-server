name: Release - Version Bump and Publish

on:
    push:
        tags:
            - "v*.*.*"
        branches:
            - main # Only allow tags pushed from main branch
    workflow_dispatch:
        inputs:
            version-bump:
                description: "Version bump type"
                required: true
                default: "patch"
                type: choice
                options:
                    - patch
                    - minor
                    - major

jobs:
    quality:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                check: [lint, test]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version-file: ".nvmrc"
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Run ${{ matrix.check }}
              run: npm run ${{ matrix.check }}

    version-and-build:
        runs-on: ubuntu-latest
        needs: quality

        permissions:
            contents: write

        outputs:
            version: ${{ steps.version.outputs.version }}
            tag: ${{ steps.version.outputs.tag }}
            skip_git: ${{ steps.version.outputs.skip_git }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.PAT_TOKEN }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version-file: ".nvmrc"
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Calculate version
              id: version
              run: |
                  # If triggered by tag, use that version
                  if [[ "${{ github.ref }}" == refs/tags/* ]]; then
                      TAG_NAME=${GITHUB_REF#refs/tags/}
                      VERSION=${TAG_NAME#v}
                      echo "version=${VERSION}" >> $GITHUB_OUTPUT
                      echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT
                      echo "skip_git=true" >> $GITHUB_OUTPUT
                  else
                      # Manual trigger - calculate next version
                      LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
                      VERSION=${LATEST_TAG#v}
                      IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
                      
                      # Bump version based on input
                      case "${{ github.event.inputs.version-bump }}" in
                          major)
                              MAJOR=$((MAJOR + 1))
                              MINOR=0
                              PATCH=0
                              ;;
                          minor)
                              MINOR=$((MINOR + 1))
                              PATCH=0
                              ;;
                          *)
                              PATCH=$((PATCH + 1))
                              ;;
                      esac
                      
                      NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
                      echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
                      echo "tag=v${NEW_VERSION}" >> $GITHUB_OUTPUT
                      echo "skip_git=false" >> $GITHUB_OUTPUT
                  fi

            - name: Update package.json version
              run: |
                  # Update package.json with the calculated/extracted version
                  npm version ${{ steps.version.outputs.version }} --no-git-tag-version --allow-same-version

            - name: Build
              run: npm run build

            - name: Commit version bump
              if: steps.version.outputs.skip_git != 'true'
              run: |
                  git config --local user.email "github-actions[bot]@users.noreply.github.com"
                  git config --local user.name "github-actions[bot]"
                  git add package.json package-lock.json
                  git commit -m "chore: bump version to ${{ steps.version.outputs.version }} [skip ci]"
                  git tag ${{ steps.version.outputs.tag }}

            - name: Push changes and tag
              if: steps.version.outputs.skip_git != 'true'
              run: |
                  git push origin main
                  git push origin ${{ steps.version.outputs.tag }}

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-output
                  path: build/
                  retention-days: 1

            - name: Upload package files
              uses: actions/upload-artifact@v4
              with:
                  name: package-files
                  path: |
                      package.json
                      package-lock.json
                  retention-days: 1

    publish-npm:
        runs-on: ubuntu-latest
        needs: version-and-build
        environment: production

        permissions:
            contents: read
            id-token: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version-file: ".nvmrc"
                  registry-url: "https://registry.npmjs.org"

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-output
                  path: build/

            - name: Download package files
              uses: actions/download-artifact@v4
              with:
                  name: package-files
                  path: .

            - name: Publish to npm
              run: npm publish
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    publish-docker:
        runs-on: ubuntu-latest
        needs: [version-and-build, publish-npm]
        environment: production

        permissions:
            contents: read
            packages: write
            id-token: write
            attestations: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: build-output
                  path: build/

            - name: Extract Node version from .nvmrc
              id: node-version
              run: |
                  NODE_VERSION=$(cat .nvmrc)
                  echo "version=${NODE_VERSION}" >> $GITHUB_OUTPUT

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Extract metadata for Docker
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: |
                      ghcr.io/${{ github.repository }}
                      ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
                  tags: |
                      type=semver,pattern={{version}},value=${{ needs.version-and-build.outputs.version }}
                      type=raw,value=latest

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              id: build
              with:
                  context: .
                  push: true
                  build-args: |
                      NODE_VERSION=${{ steps.node-version.outputs.version }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Generate artifact attestation
              uses: actions/attest-build-provenance@v1
              with:
                  subject-name: ghcr.io/${{ github.repository }}
                  subject-digest: ${{ steps.build.outputs.digest }}
                  push-to-registry: true

    create-release:
        runs-on: ubuntu-latest
        needs: [version-and-build, publish-npm, publish-docker]

        permissions:
            contents: write

        steps:
            - name: Create GitHub Release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ needs.version-and-build.outputs.tag }}
                  release_name: Release ${{ needs.version-and-build.outputs.version }}
                  body: |
                      Release ${{ needs.version-and-build.outputs.version }}

                      Auto-generated release from main branch.

                      Published to:
                      - npm: https://www.npmjs.com/package/homebridge-mcp-server
                      - Docker Hub: https://hub.docker.com/r/${{ github.repository_owner }}/homebridge-mcp-server
                      - GHCR: https://ghcr.io/${{ github.repository }}
                  draft: false
                  prerelease: false
